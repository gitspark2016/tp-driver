/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "touch panel driver"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY ""
#CATEGORY "12" // System Control
#PRINT_TO_TRACE
// #DIGITAL_EXPAND
// #ANALOG_SERIAL_EXPAND
// #OUTPUT_SHIFT
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
#define_constant _page_welcome					00
#define_constant _page_tech						01
#define_constant _page_home						02
#define_constant _page_present					03
#define_constant _page_ac						04

#define_constant _icon_setting_blank			00
#define_constant _icon_setting_home				01
#define_constant _icon_setting_power			02
#define_constant _icon_setting_audio			03
#define_constant _icon_setting_camera			04

#define_constant _icon_home_blank				00
#define_constant _icon_home_present				01
#define_constant _icon_home_ac					02

#HELP_BEGIN
	Touch Panel Driver for SparkAV Standard Touch Panel.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
#USER_LIBRARY "sparklib"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
//===========================================================================================================================
digital_input		press_tech, press_welcome, press_home_menu_1, press_home_menu_2, _skip_, _skip_, _skip_, _skip_, press_settings_1,
					press_settings_2, press_settings_3, press_settings_exit, _skip_, _skip_, _skip_, pwd_clear, pwd_mask,
					pwd_0, pwd_1, pwd_2, pwd_3, pwd_4, pwd_5, pwd_6, pwd_7, pwd_8, pwd_9, pwd_backspace, pwd_submit, pwd_exit,
					_skip_, source_1_left, source_1_right, source_2_left, source_2_right, source_3_left, source_3_right, _skip_,
					tech_settings_exit, tech_home_present, tech_home_ac, _skip_, shutdown_yes, shutdown_no, _skip_;

digital_output		page_welcome, page_tech, page_home, page_present, page_ac, _skip_, sub_home_even, sub_home_odd, sub_tech_pwd,
					sub_settings_even, sub_settings_odd, sub_settings_volume, sub_startup, sub_confirm_shutdown, _skip_,
					_skip_, pwd_mask_fb,_skip_, _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
					_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, tech_home_present_fb,
					tech_home_ac_fb, sub_tech_home, sub_tech_sources, _skip_, _skip_, _skip_,
					_skip_, _skip_, _skip_;
//===========================================================================================================================
analog_input		pwd_attempts, settings_1_mode_fb, settings_2_mode_fb, settings_3_mode_fb;
analog_output		settings_1_mode, settings_2_mode, settings_3_mode, source_1_mode, source_2_mode, source_3_mode, home_1_mode,
					home_2_mode, home_3_mode, _skip_;
//===========================================================================================================================
string_output		pwd_tech, prompt_welcome, prompt_startup;
//===========================================================================================================================
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER		tech_pwd_hold_flag, tech_present_hold_flag, tech_ac_hold_flag, page_val[8], temp_page_val[8],
			busy_flag, system_status;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING		pwd_string[10], pwd_string_hidden[10], pwd_correct[4];


/*************************************************************/
// BEGIN SETTINGS BAR AND PAGE NAVIGATION CODE
/*************************************************************/

// Refreshes the Analog Mode of the Settings Icons upon Page Refresh
Function SettingsRefresh()
{
		if(page_val[_page_welcome])
		{
        	sub_settings_even = 0;
			sub_settings_odd = 0;
		}
		else if(page_val[_page_tech])
		{
        	sub_settings_even = 0;
			sub_settings_odd = 1;

			settings_1_mode = _icon_setting_home;
        }
		else if(page_val[_page_home])
		{
			if(system_status = 0)
        	{
        		sub_settings_even = 0;
				sub_settings_odd = 0;
			}
			else
        	{
        		sub_settings_even = 0;
				sub_settings_odd = 1;

				settings_1_mode = _icon_setting_power;
				settings_2_mode = _icon_setting_blank;
				settings_3_mode = _icon_setting_blank;
			}
		}
		else if(page_val[_page_present])
        {
        	sub_settings_even = 0;
			sub_settings_odd = 1;

			settings_3_mode = _icon_setting_power;
			settings_1_mode = _icon_setting_home;
			settings_2_mode = _icon_setting_audio;
		}
		else if(page_val[_page_ac])
		{
        	sub_settings_even = 0;
			sub_settings_odd = 1;

			settings_3_mode = _icon_setting_audio;
			settings_1_mode = _icon_setting_home;
			settings_2_mode = _icon_setting_power;

		}
}

Function ClearSubs()
{
	sub_tech_sources = 0;
}

//Refreshes the Visibility Join of Pages
//Calls for a refresh of Setting Icon Analog Modes after the Pare Refresh is complete
//Calls for a clearing of unnecessary subpages upon page flip
Function PageRefresh(integer page_index)
{
		integer i;

		page_val[page_index] = 1;
		for(i = 0 to GetNumArrayCols(page_val))
		{
			if(i != page_index)
			{
				page_val[i] = 0;
			}
		}

		page_welcome = page_val[_page_welcome];
		page_tech = page_val[_page_tech];
		page_home = page_val[_page_home];
		page_present = page_val[_page_present];
		page_ac = page_val[_page_ac];

		ClearSubs();
		SettingsRefresh();
}

Function SystemStartup(integer page_index)
{
	sub_startup = 1;
	prompt_startup = "Please wait while the system starts up";
	delay(300);
	sub_startup = 0;
	PageRefresh(page_index);
	prompt_startup = "";
	system_status = 1;

}

RELEASE press_welcome
{
	if(busy_flag != 1)
	{
		PageRefresh(_page_home);
	}
}

RELEASE press_home_menu_1
{
	if(home_1_mode = _icon_home_present)
	{
		if(system_status)
		{
			PageRefresh(_page_present);
		}
		else
		{
    		SystemStartup(_page_present);
		}
	}
	if(home_1_mode = _icon_home_ac)
	{
		if(system_status)
		{
			PageRefresh(_page_ac);
		}
		else
		{
			SystemStartup(_page_ac);
		}
	}
}

RELEASE press_home_menu_2
{
	if(home_2_mode = _icon_home_present)
	{
		if(system_status)
		{
    		PageRefresh(_page_present);
		}
		else
		{
			SystemStartup(_page_present);
		}
	}
	if(home_2_mode = _icon_home_ac)
	{
		if(system_status)
		{
			PageRefresh(_page_ac);
		}
		else
		{
			SystemStartup(_page_ac);
		}
	}
}


/*************************************************************/
// BEGIN SETTINGS BUTTON EVENT TRIGGES

// Evaluates the feedback for each button and opens the
// corresponding subpage or performs the corresponding page flip
/*************************************************************/
PUSH press_settings_1
{
	if(settings_1_mode_fb = _icon_setting_home)
	{
		PageRefresh(_page_home);
	}
	else if(settings_1_mode_fb = _icon_setting_power)
	{
		sub_confirm_shutdown = 1;
	}
}

PUSH press_settings_2
{
	if(settings_2_mode_fb = _icon_setting_home)
	{
		PageRefresh(_page_home);
	}
	else if(settings_2_mode_fb = _icon_setting_power)
	{
    	sub_confirm_shutdown = 1;
	}
	else if(settings_2_mode_fb = _icon_setting_audio)
	{
    	sub_settings_volume = 1;
	}
}

PUSH press_settings_3
{
	if(settings_3_mode_fb = _icon_setting_home)
	{
    	PageRefresh(_page_home);
	}
	else if(settings_3_mode_fb = _icon_setting_audio)
	{
		sub_confirm_shutdown = 1;
	}
	else if(settings_3_mode_fb = _icon_setting_audio)
	{
    	sub_settings_volume = 1;
	}
}

PUSH press_settings_exit
{
	sub_settings_volume = 0;
}
/*************************************************************/
// END SETTINGS BUTTON EVENT TRIGGERS
/*************************************************************/




Function SystemShutdown()
{
	busy_flag = 1;
	prompt_welcome = "please wait while system shuts down.";
	delay(300);
	system_status = 0;
	prompt_welcome = "touch screen to begin";
	busy_flag = 0;
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/*************************************************************/
//Press and hold to access tech page
PUSH press_tech
{
	if((page_welcome = 1 || page_home = 1) && system_status = 0)
	{
		tech_pwd_hold_flag = 1;
		delay(100);
		if(tech_pwd_hold_flag = 1)
		{
			sub_tech_pwd = 1;
	    	tech_pwd_hold_flag = 0;
		}
	}
}

RELEASE press_tech
{
	if(page_welcome = 1)
	{
		if(tech_pwd_hold_flag = 1)
		{
	    	tech_pwd_hold_flag = 0;
		}
	}
}


PUSH shutdown_yes
{
	PageRefresh(0);
	sub_confirm_shutdown = 0;
	SystemShutdown();
}


PUSH shutdown_no
{
	sub_confirm_shutdown = 0;
}

/*************************************************************/
// Handles the source mode selection on the tech pages

PUSH source_1_left
{
	if (source_1_mode = 0)
	{
    	source_1_mode = 2;
	}
	else
	{
    	source_1_mode = source_1_mode - 1;
	}
}

PUSH source_1_right
{
	if (source_1_mode = 2)
	{
    	source_1_mode = 0;
	}
	else
	{
    	source_1_mode = source_1_mode + 1;
	}
}

PUSH source_2_left
{
	if (source_2_mode = 0)
	{
    	source_2_mode = 2;
	}
	else
	{
    	source_2_mode = source_2_mode - 1;
	}
}

PUSH source_2_right
{
	if (source_2_mode = 2)
	{
    	source_2_mode = 0;
	}
	else
	{
    	source_2_mode = source_2_mode + 1;
	}
}

PUSH source_3_left
{
	if (source_3_mode = 0)
	{
    	source_3_mode = 2;
	}
	else
	{
    	source_3_mode = source_3_mode - 1;
	}
}

PUSH source_3_right
{
	if (source_3_mode = 2)
	{
    	source_3_mode = 0;
	}
	else
	{
    	source_3_mode = source_3_mode + 1;
	}
}

// END TECHNICIAN SOURCE SELECT LOGIC
/*************************************************************/






/*************************************************************/
// BEGIN TECHNICIAN PASSWORD CODE
/*************************************************************/
Function PasswordDigit(integer digit)
{
	if(len(pwd_string) < 8)
	{
			pwd_string = pwd_string + itoa(digit);
			pwd_string_hidden = pwd_string_hidden + "*";

			if(pwd_mask_fb != 1)
				pwd_tech = pwd_string;
			else
               	pwd_tech = pwd_string_hidden;
	}
}

PUSH pwd_mask
{
	if(pwd_mask_fb = 0)
	{
    	pwd_mask_fb = 1;
		pwd_tech = pwd_string_hidden;
	}
	else
	{
    	pwd_mask_fb = 0;
		pwd_tech = pwd_string;
	}
}

PUSH pwd_clear
{
	pwd_string = "";
	pwd_string_hidden = "";
	pwd_tech = pwd_string;
}

PUSH pwd_exit
{
	sub_tech_pwd = 0;
}

PUSH pwd_0
{
	PasswordDigit(0);
}

PUSH pwd_1
{
	PasswordDigit(1);
}

PUSH pwd_2
{
	PasswordDigit(2);
}

PUSH pwd_3
{
	PasswordDigit(3);
}

PUSH pwd_4
{
	PasswordDigit(4);
}

PUSH pwd_5
{
	PasswordDigit(5);
}

PUSH pwd_6
{
	PasswordDigit(6);
}

PUSH pwd_7
{
	PasswordDigit(7);
}

PUSH pwd_8
{
	PasswordDigit(8);
}

PUSH pwd_9
{
	PasswordDigit(9);
}

PUSH pwd_backspace
{
	pwd_string = left(pwd_string, len(pwd_string) - 1);
	pwd_string_hidden = left(pwd_string_hidden, len(pwd_string_hidden) - 1);

	if(pwd_mask_fb != 1)
		pwd_tech = pwd_string;
	else
		pwd_tech = pwd_string_hidden;
}

Push pwd_submit
{
	if(pwd_string != "1234")
	{
    	pwd_string = "";
		pwd_string_hidden = "";
		pwd_tech = pwd_string;
	}

	if(pwd_string = pwd_correct)
	{
		PageRefresh(1);
    	pwd_string = "";
		pwd_string_hidden = "";
		pwd_tech = pwd_string;
		sub_tech_pwd = 0;
	}
}
/*************************************************************/
// END TECHNICIAN PASSWORD CODE
/*************************************************************/


/*************************************************************/
// BEGIN TECHNICIAN MENU SETUP
/*************************************************************/
FUNCTION HomeScreenSetup()
{
	integer i;

	i = tech_home_present_fb + tech_home_ac_fb;

	if(i = 0)
	{
		sub_home_even = 0;
		sub_home_odd =0;
	}
	else if(i = 1)
	{
		sub_home_even = 0;
   		sub_home_odd = 1;

		if(tech_home_present_fb)
		{
			home_1_mode = _icon_home_present;
			home_2_mode = _icon_home_blank;
			home_3_mode = _icon_home_blank;
		}
		else if(tech_home_ac_fb)
		{
			home_1_mode = _icon_home_ac;
			home_2_mode = _icon_home_blank;
			home_3_mode = _icon_home_blank;
		}
	}
	else if(i = 2)
	{
    	sub_home_even = 1;
		sub_home_odd = 0;

		home_1_mode = 1;
		home_2_mode = 2;
	}
}

PUSH tech_home_present
{
	if(tech_home_present_fb)
	{
		tech_present_hold_flag = 1;
		wait(65, tech_present_wait1)
		{
			tech_present_hold_flag = 0;
       		sub_tech_sources = 1;
		}
	}

	if(! tech_home_present_fb)
	{
		tech_home_present_fb = 1;
		wait(65, tech_present_wait2)
		{
			sub_tech_sources = 1;
		}
   	}

	HomeScreenSetup();
}

RELEASE tech_home_present
{
	if(tech_present_hold_flag)
	{
		tech_home_present_fb = 0;
		tech_present_hold_flag = 0;
	}

	cancelwait(tech_present_wait1);
	cancelwait(tech_present_wait2);

	HomeScreenSetup();
}


PUSH tech_home_ac
{
	if(tech_home_ac_fb)
	{
		tech_ac_hold_flag = 1;
		wait(65, tech_ac_wait1)
		{
			tech_ac_hold_flag = 0;
       		//sub_tech_sources = 1;
		}
	}

	if(! tech_home_ac_fb)
	{
		tech_home_ac_fb = 1;
		wait(65, tech_ac_wait2)
		{
			//sub_tech_sources = 1;
		}
   	}

	HomeScreenSetup();
}

RELEASE tech_home_ac
{
	if(tech_ac_hold_flag)
	{
		tech_home_ac_fb = 0;
		tech_ac_hold_flag = 0;
	}

	cancelwait(tech_ac_wait1);
	cancelwait(tech_ac_wait2);

	HomeScreenSetup();
}


PUSH tech_settings_exit
{
	sub_tech_sources = 0;
}


/*************************************************************/
// END TECHNICIAN MENU SETUP
/*************************************************************/






/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	source_1_mode = 0;
	source_2_mode = 0;
	source_3_mode = 0;
	system_status = 0;

	pwd_correct = "1234";

	PageRefresh(0);
	PageRenew();
	//Sets the page to the welcome screen by default

//	while(1)
//	{

//	}
    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
