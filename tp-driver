/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "touch panel driver"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY ""
#CATEGORY "12" // System Control
#PRINT_TO_TRACE
// #DIGITAL_EXPAND
// #ANALOG_SERIAL_EXPAND
// #OUTPUT_SHIFT
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
	Touch Panel Driver for SparkAV Standard Touch Panel.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
//===========================================================================================================================
digital_input		press_tech, press_welcome, _skip_, _skip_, press_settings_1, press_settings_2, press_settings_3,
					press_settings_exit, _skip_, pwd_hide, pwd_0, pwd_1, pwd_2, pwd_3, pwd_4, pwd_5, pwd_6, pwd_7,
					pwd_8, pwd_9, pwd_backspace, pwd_submit, pwd_exit, _skip_, source_1_left, source_1_right, source_2_left,
					source_2_right, source_3_left, source_3_right, _skip_, shutdown_yes, shutdown_no, _skip_;

digital_output		page_welcome, page_tech, page_present, _skip_, sub_tech_pwd, sub_settings_even, sub_settings_odd,
					sub_settings_volume, sub_confirm_shutdown, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
					_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
					_skip_, _skip_, _skip_, _skip_, _skip_, _skip_;
//===========================================================================================================================
analog_input		pwd_attempts, settings_1_mode_fb, settings_2_mode_fb, settings_3_mode_fb;
analog_output		settings_1_mode, settings_2_mode, settings_3_mode, source_1_mode, source_2_mode, source_3_mode, _skip_;
//===========================================================================================================================
string_output		pwd_tech, prompt_welcome;
//===========================================================================================================================
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER		tech_pwd_hold_flag, page_val[8], temp_page_val[8];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING		pwd_string[10], pwd_string_hidden[10];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function SettingsRefresh()
{
		if(page_val[0] = 1)
		{
        	sub_settings_even = 0;
			sub_settings_odd = 1;

        	settings_1_mode = 0;
			settings_2_mode = 4;
			settings_3_mode = 4;
		}
		else if(page_val[1] = 1)
		{
        	sub_settings_even = 1;
			sub_settings_odd = 0;

			settings_1_mode = 1;
			settings_2_mode = 0;
		}
		else if(page_val[3] = 1)
        {
        	sub_settings_even = 0;
			sub_settings_odd = 1;

			settings_1_mode = 1;
			settings_2_mode = 2;
			settings_3_mode = 0;

		}
		else
		{
        	sub_settings_odd = 0;
			sub_settings_even = 0;
		}

}

Function PageRefresh(integer page_index)
{
		integer i;

		page_val[page_index] = 1;
		for(i = 0 to GetNumArrayCols(page_val))
		{
			if(i != page_index)
			{
				page_val[i] = 0;
			}
		}

		page_welcome = page_val[0];
		page_tech = page_val[1];
		page_present = page_val[3];

		SettingsRefresh();
}

Function PasswordDigit(integer digit)
{
	if(len(pwd_string) < 8)
	{
			pwd_string = pwd_string + chr(digit);
			pwd_string_hidden = pwd_string_hidden + "*";

			if(pwd_hide != 1)
				pwd_tech = pwd_string;
			else
               	pwd_tech = pwd_string_hidden;
	}
}

Function PasswordBackspace()
{
	pwd_string = left(pwd_string, len(pwd_string) - 1);
	pwd_string_hidden = left(pwd_string_hidden, len(pwd_string_hidden) - 1);

	if(pwd_hide != 1)
		pwd_tech = pwd_string;
	else
		pwd_tech = pwd_string_hidden;
}

Function PasswordSubmit()
{
	//PageRefresh(1);
}


Function SystemShutdown()
{
	print("System Shutting Down");
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/*************************************************************/
//Press and hold to access tech page
PUSH press_tech
{
	tech_pwd_hold_flag = 1;
	delay(100);
	if(tech_pwd_hold_flag = 1)
	{
		sub_tech_pwd = 1;
    	tech_pwd_hold_flag = 0;
	}
}

RELEASE press_tech
{
	if(tech_pwd_hold_flag = 1)
	{
    	tech_pwd_hold_flag = 0;
	}
}
/*===========================================================================*/
//Navigate to the presentation page
PUSH press_welcome
{
	PageRefresh(3);
}
/*************************************************************/




/*************************************************************/
//Control of the Settings Menu
PUSH press_settings_1
{
	if(settings_1_mode_fb = 0)
	{
		sub_confirm_shutdown = 1;
	}
	else if(settings_1_mode_fb = 1)
	{
    	PageRefresh(0);
	}
}

PUSH press_settings_2
{
	if(settings_2_mode_fb = 0)
	{
    	sub_confirm_shutdown = 1;
	}
	else if(settings_2_mode_fb = 1)
	{
    	PageRefresh(0);
	}
	else if(settings_2_mode_fb = 2)
	{
    	sub_settings_volume = 1;
	}
}

PUSH press_settings_3
{
	if(settings_3_mode_fb = 0)
	{
    	sub_confirm_shutdown = 1;
	}
	else if(settings_3_mode_fb = 1)
	{
    	PageRefresh(0);
	}
	else if(settings_3_mode_fb = 2)
	{
    	sub_settings_volume = 1;
	}
}

PUSH press_settings_exit
{
	sub_settings_volume = 0;
}
/*************************************************************/

PUSH shutdown_yes
{
	PageRefresh(0);
	sub_confirm_shutdown = 0;
	SystemShutdown();
}


PUSH shutdown_no
{
	sub_confirm_shutdown = 0;
}

/*************************************************************/
// Handles the source mode selection on the tech pages

PUSH source_1_left
{
	if (source_1_mode = 0)
	{
    	source_1_mode = 2;
	}
	else
	{
    	source_1_mode = source_1_mode - 1;
	}

}

PUSH source_1_right
{
	if (source_1_mode = 2)
	{
    	source_1_mode = 0;
	}
	else
	{
    	source_1_mode = source_1_mode + 1;
	}

}

PUSH source_2_left
{
	if (source_2_mode = 0)
	{
    	source_2_mode = 2;
	}
	else
	{
    	source_2_mode = source_2_mode - 1;
	}

}

PUSH source_2_right
{
	if (source_2_mode = 2)
	{
    	source_2_mode = 0;
	}
	else
	{
    	source_2_mode = source_2_mode + 1;
	}

}

PUSH source_3_left
{
	if (source_3_mode = 0)
	{
    	source_3_mode = 2;
	}
	else
	{
    	source_3_mode = source_3_mode - 1;
	}

}

PUSH source_3_right
{
	if (source_3_mode = 2)
	{
    	source_3_mode = 0;
	}
	else
	{
    	source_3_mode = source_3_mode + 1;
	}

}

// END TECHNICIAN SOURCE SELECT LOGIC
/*************************************************************/

/*************************************************************/
// BEGIN TECHNICIAN PASSWORD REQUIREMENT
PUSH pwd_exit
{
	sub_tech_pwd = 0;
}

PUSH pwd_0
{
	PasswordDigit(0);
}

PUSH pwd_1
{
	PasswordDigit(1);
}

PUSH pwd_2
{
	PasswordDigit(2);
}

PUSH pwd_3
{
	PasswordDigit(3);
}

PUSH pwd_4
{
	PasswordDigit(4);
}

PUSH pwd_5
{
	PasswordDigit(5);
}

PUSH pwd_6
{
	PasswordDigit(6);
}

PUSH pwd_7
{
	PasswordDigit(7);
}

PUSH pwd_8
{
	PasswordDigit(8);
}

PUSH pwd_9
{
	PasswordDigit(9);
}

PUSH pwd_backspace
{
	PasswordBackspace();
}

Push pwd_submit
{
	PasswordSubmit();
}









/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

	source_1_mode = 0;
	source_2_mode = 0;
	source_3_mode = 0;

//	while(1)
//	{

//	}
    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
